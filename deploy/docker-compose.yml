services:
  app:
    build:
      context: ../
      dockerfile: deploy/Dockerfile
    container_name: ${APP_CONTAINER_NAME}
    ports:
      - "${APP_PORT}:8080"
      - "9000:9000"
      - "3000:3000"
    environment:
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${POSTGRES_DB}
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
    depends_on:
      db:
          condition: service_healthy
    volumes:
      - ../configs:/root/configs
    networks:
      - appnetwork

  db:
    image: postgres:17
    container_name: ${POSTGRES_DB}
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${DB_PORT}:5432"
    healthcheck:
      test: 'psql -w -U ${POSTGRES_USER} -d ${POSTGRES_DB} -h localhost -c "SELECT 1"'
      interval: 5s
      timeout: 2s
      retries: 3
      start_period: 5s
    volumes:
      - ../migrations:/docker-entrypoint-initdb.d
    networks:
      - appnetwork

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "${PROMETHEUS_PORT}:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      - appnetwork


networks:
  appnetwork:
    driver: bridge