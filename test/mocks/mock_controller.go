// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/handler/handler.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	dto "github.com/senorUVE/pvz_service/internal/dto"
	models "github.com/senorUVE/pvz_service/internal/models"
)

// MockPvzService is a mock of PvzService interface.
type MockPvzService struct {
	ctrl     *gomock.Controller
	recorder *MockPvzServiceMockRecorder
}

// MockPvzServiceMockRecorder is the mock recorder for MockPvzService.
type MockPvzServiceMockRecorder struct {
	mock *MockPvzService
}

// NewMockPvzService creates a new mock instance.
func NewMockPvzService(ctrl *gomock.Controller) *MockPvzService {
	mock := &MockPvzService{ctrl: ctrl}
	mock.recorder = &MockPvzServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPvzService) EXPECT() *MockPvzServiceMockRecorder {
	return m.recorder
}

// AddProduct mocks base method.
func (m *MockPvzService) AddProduct(ctx context.Context, request *dto.AddProductRequest) (*dto.AddProductResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProduct", ctx, request)
	ret0, _ := ret[0].(*dto.AddProductResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddProduct indicates an expected call of AddProduct.
func (mr *MockPvzServiceMockRecorder) AddProduct(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProduct", reflect.TypeOf((*MockPvzService)(nil).AddProduct), ctx, request)
}

// AuthUser mocks base method.
func (m *MockPvzService) AuthUser(ctx context.Context, request *dto.AuthRequest) (*dto.AuthResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthUser", ctx, request)
	ret0, _ := ret[0].(*dto.AuthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthUser indicates an expected call of AuthUser.
func (mr *MockPvzServiceMockRecorder) AuthUser(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthUser", reflect.TypeOf((*MockPvzService)(nil).AuthUser), ctx, request)
}

// CloseReception mocks base method.
func (m *MockPvzService) CloseReception(ctx context.Context, pvzID uuid.UUID) (*dto.CloseLastReceptionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseReception", ctx, pvzID)
	ret0, _ := ret[0].(*dto.CloseLastReceptionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseReception indicates an expected call of CloseReception.
func (mr *MockPvzServiceMockRecorder) CloseReception(ctx, pvzID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseReception", reflect.TypeOf((*MockPvzService)(nil).CloseReception), ctx, pvzID)
}

// CreatePVZ mocks base method.
func (m *MockPvzService) CreatePVZ(ctx context.Context, request *dto.PvzCreateRequest) (*dto.PvzCreateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePVZ", ctx, request)
	ret0, _ := ret[0].(*dto.PvzCreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePVZ indicates an expected call of CreatePVZ.
func (mr *MockPvzServiceMockRecorder) CreatePVZ(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePVZ", reflect.TypeOf((*MockPvzService)(nil).CreatePVZ), ctx, request)
}

// CreateReception mocks base method.
func (m *MockPvzService) CreateReception(ctx context.Context, request *dto.CreateReceptionRequest) (*dto.CreateReceptionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReception", ctx, request)
	ret0, _ := ret[0].(*dto.CreateReceptionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReception indicates an expected call of CreateReception.
func (mr *MockPvzServiceMockRecorder) CreateReception(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReception", reflect.TypeOf((*MockPvzService)(nil).CreateReception), ctx, request)
}

// CreateUser mocks base method.
func (m *MockPvzService) CreateUser(ctx context.Context, request *dto.RegisterRequest) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, request)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockPvzServiceMockRecorder) CreateUser(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockPvzService)(nil).CreateUser), ctx, request)
}

// DeleteLastProduct mocks base method.
func (m *MockPvzService) DeleteLastProduct(ctx context.Context, pvzId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLastProduct", ctx, pvzId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLastProduct indicates an expected call of DeleteLastProduct.
func (mr *MockPvzServiceMockRecorder) DeleteLastProduct(ctx, pvzId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLastProduct", reflect.TypeOf((*MockPvzService)(nil).DeleteLastProduct), ctx, pvzId)
}

// DummyLogin mocks base method.
func (m *MockPvzService) DummyLogin(ctx context.Context, role string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DummyLogin", ctx, role)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DummyLogin indicates an expected call of DummyLogin.
func (mr *MockPvzServiceMockRecorder) DummyLogin(ctx, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DummyLogin", reflect.TypeOf((*MockPvzService)(nil).DummyLogin), ctx, role)
}

// GetPvz mocks base method.
func (m *MockPvzService) GetPvz(ctx context.Context, request *dto.GetPvzRequest) ([]*dto.PVZWithReceptions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPvz", ctx, request)
	ret0, _ := ret[0].([]*dto.PVZWithReceptions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPvz indicates an expected call of GetPvz.
func (mr *MockPvzServiceMockRecorder) GetPvz(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPvz", reflect.TypeOf((*MockPvzService)(nil).GetPvz), ctx, request)
}

// GetUser mocks base method.
func (m *MockPvzService) GetUser(ctx context.Context, email string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, email)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockPvzServiceMockRecorder) GetUser(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockPvzService)(nil).GetUser), ctx, email)
}
