// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/controller/controller.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	dto "github.com/senorUVE/pvz_service/internal/dto"
	models "github.com/senorUVE/pvz_service/internal/models"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CloseReception mocks base method.
func (m *MockRepository) CloseReception(ctx context.Context, pvzId uuid.UUID) (*dto.CloseLastReceptionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseReception", ctx, pvzId)
	ret0, _ := ret[0].(*dto.CloseLastReceptionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseReception indicates an expected call of CloseReception.
func (mr *MockRepositoryMockRecorder) CloseReception(ctx, pvzId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseReception", reflect.TypeOf((*MockRepository)(nil).CloseReception), ctx, pvzId)
}

// CreateProduct mocks base method.
func (m *MockRepository) CreateProduct(ctx context.Context, typeOf string, receptionId uuid.UUID) (*dto.AddProductResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProduct", ctx, typeOf, receptionId)
	ret0, _ := ret[0].(*dto.AddProductResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProduct indicates an expected call of CreateProduct.
func (mr *MockRepositoryMockRecorder) CreateProduct(ctx, typeOf, receptionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*MockRepository)(nil).CreateProduct), ctx, typeOf, receptionId)
}

// CreatePvz mocks base method.
func (m *MockRepository) CreatePvz(ctx context.Context, pvz models.PVZ) (*dto.PvzCreateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePvz", ctx, pvz)
	ret0, _ := ret[0].(*dto.PvzCreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePvz indicates an expected call of CreatePvz.
func (mr *MockRepositoryMockRecorder) CreatePvz(ctx, pvz interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePvz", reflect.TypeOf((*MockRepository)(nil).CreatePvz), ctx, pvz)
}

// CreateReception mocks base method.
func (m *MockRepository) CreateReception(ctx context.Context, pvzId uuid.UUID) (*dto.CreateReceptionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReception", ctx, pvzId)
	ret0, _ := ret[0].(*dto.CreateReceptionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReception indicates an expected call of CreateReception.
func (mr *MockRepositoryMockRecorder) CreateReception(ctx, pvzId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReception", reflect.TypeOf((*MockRepository)(nil).CreateReception), ctx, pvzId)
}

// CreateUser mocks base method.
func (m *MockRepository) CreateUser(ctx context.Context, email, password, role string) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, email, password, role)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockRepositoryMockRecorder) CreateUser(ctx, email, password, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockRepository)(nil).CreateUser), ctx, email, password, role)
}

// DeleteLastProduct mocks base method.
func (m *MockRepository) DeleteLastProduct(ctx context.Context, pvzID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLastProduct", ctx, pvzID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLastProduct indicates an expected call of DeleteLastProduct.
func (mr *MockRepositoryMockRecorder) DeleteLastProduct(ctx, pvzID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLastProduct", reflect.TypeOf((*MockRepository)(nil).DeleteLastProduct), ctx, pvzID)
}

// DummyLogin mocks base method.
func (m *MockRepository) DummyLogin(ctx context.Context, role string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DummyLogin", ctx, role)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DummyLogin indicates an expected call of DummyLogin.
func (mr *MockRepositoryMockRecorder) DummyLogin(ctx, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DummyLogin", reflect.TypeOf((*MockRepository)(nil).DummyLogin), ctx, role)
}

// GetActiveReception mocks base method.
func (m *MockRepository) GetActiveReception(ctx context.Context, pvzID uuid.UUID) (*models.Reception, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveReception", ctx, pvzID)
	ret0, _ := ret[0].(*models.Reception)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveReception indicates an expected call of GetActiveReception.
func (mr *MockRepositoryMockRecorder) GetActiveReception(ctx, pvzID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveReception", reflect.TypeOf((*MockRepository)(nil).GetActiveReception), ctx, pvzID)
}

// GetPvz mocks base method.
func (m *MockRepository) GetPvz(ctx context.Context, startDate, endDate time.Time, page, limit int) ([]*dto.PVZWithReceptions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPvz", ctx, startDate, endDate, page, limit)
	ret0, _ := ret[0].([]*dto.PVZWithReceptions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPvz indicates an expected call of GetPvz.
func (mr *MockRepositoryMockRecorder) GetPvz(ctx, startDate, endDate, page, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPvz", reflect.TypeOf((*MockRepository)(nil).GetPvz), ctx, startDate, endDate, page, limit)
}

// GetUser mocks base method.
func (m *MockRepository) GetUser(ctx context.Context, email string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, email)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockRepositoryMockRecorder) GetUser(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockRepository)(nil).GetUser), ctx, email)
}
